/* ************* Edit these variables to reflect your preferences ************ */
var primary_id = "XXXXX"   // This is the calendar you want to create blocks on (usually your email address)
var secondary_id = "XXXXX"   // This is the calendar you want to pull events from (usually your email address)
var event_title = "blocked from ___" // change this to reflect your source calendar name
var time_frame = 30 // number of days ahead to check and create blocks from
var skip_weekends = "yes" // change to no if you want to include weekends
var double_book_events = "no" // if you want to push an event to your primary calendar even if you are already busy change to "yes"
var enable_primary_reminder = "no" // change to "yes" if you want reminder notificaitons on your primary calendar
/* *************************************************************************** */

// creates time blocks on a primary calendar based off of events on a secondary calendar
function cal_sync() {
  // get events lists from both calendars for the given time frame
  var secondary_events = get_events(secondary_id, time_frame);
  var primary_events = get_events(primary_id, time_frame);
  var blocked_events_list = [];
  // list of blocked events we have already created
  for (event in primary_events) {
    if (primary_events[event].getTitle() == event_title) {
      blocked_events_list.push(primary_events[event])
    }
  }

  // iterate through all returned events on secondary calendar
  for (event in secondary_events) {
    var import_event = secondary_events[event];
    try {
      if (double_book_events == "no") {
        if (import_event.isAllDayEvent() == false && get_interval(skip_weekends) && is_busy(primary_id, import_event.getStartTime(), import_event.getEndTime()) != "busy") {
          create_event(primary_id, event_title, import_event.getStartTime(), import_event.getEndTime());
        }
      }
      else if (double_book_events == "yes") {
        if (import_event.isAllDayEvent() == false && get_interval(skip_weekends)) {
          if (is_busy(primary_id, import_event.getStartTime(), import_event.getEndTime()) == "busy") {
            if (start_time_match(blocked_events_list, import_event.getStartTime()) == false) {
              create_event(primary_id, event_title, import_event.getStartTime(), import_event.getEndTime());
            }
          }
          else {
            create_event(primary_id, event_title, import_event.getStartTime(), import_event.getEndTime());
          }
        }
      }
    }
    catch (err) {
      console.log(err)
      console.log(is_busy(primary_id, import_event.getStartTime(), import_event.getEndTime()))
    }
    finally {
      continue;
    }
  }
  // remove any orphaned blocked events from primary calendar if original event has been modified
  orphan_cleanup(primary_events);
}

function create_event(calendar_id, title, start_time, end_time) {
  new_event = CalendarApp.getCalendarById(calendar_id).createEvent(title, start_time, end_time)
  if (enable_primary_reminder == "no") {
    new_event.removeAllReminders();
  }
}

// gets all events for a given calendar and time frame
function get_events(calendar_id, time_frame) {
  var today = new Date();
  var end_date = new Date();
  end_date.setDate(today.getDate() + time_frame);
  return CalendarApp.getCalendarById(calendar_id).getEvents(today, end_date);
}

// sets interval to include or skip weekends based on skip_weekends
function get_interval(yes_no) {
  if (yes_no == "yes") {
    return "(day != 6 || day != 7)";
  }
  return "(day != 0)";
}

// check if time slot is busy on a given calendar
function is_busy(calendar_id, start_time, end_time) {
  // this block is the json payload to query free/busy from gcal api
  var event_time = {
    "timeMin": start_time.toISOString(),
    "timeMax": end_time.toISOString(),
    "items": [{ "id": calendar_id }]
  }

  if (Calendar.Freebusy.query(event_time).calendars[calendar_id]["busy"].length == 0)
    return;
  return "busy";
}

// cleanup orphaned events on desired calendar
function orphan_cleanup(primary_events) {
  try {
    for (event in primary_events) {
      // var to store potential orphans
      orphan = primary_events[event];

      // for all blocked events in primary calendar check that time slot returns "busy" from secondary calendar. If not delete oprphaned event
      if (orphan.getTitle() == event_title && is_busy(secondary_id, orphan.getStartTime(), orphan.getEndTime()) != "busy") {
        delete_orphan = CalendarApp.getCalendarById(primary_id).getEventById(orphan.getId()).deleteEvent();
      }
    }
  }
  catch (err) {
    console.log(err)
  }
  finally {
    return;
  }
}

// find blocked event starttime match
function start_time_match(list, start_time) {
  var date_check = new Date(start_time)
  for (event in list) {
    if (list[event].getStartTime().getTime() == start_time.getTime()) {
      console.log("true")
      return true;
    }
  }
  return false;
}

// delete all blocks.  Use this if troubleshooting and you need to remove all created events
function remove_all_created_events() {
  var primary_events = get_events(primary_id, time_frame);
  for (event in primary_events) {
    if (primary_events[event].getTitle() == event_title) {
      delete_block_event = CalendarApp.getCalendarById(primary_id).getEventById(primary_events[event].getId()).deleteEvent();
    }
  }
}
